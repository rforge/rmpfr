1) R: character -> mpfr   "3.14159265358979323846264" -> mpfr

3) "Arith" and "Compare" methods currently ``lose dim + dimnames''
   for "mpfrArray" (& "mpfrMatrix")

  The solution is a bit tedious because the Ops do recycling pretty
  generously for vectors,
  but pretty stringently when one of the operands is a matrix.

  If the other part is a matrix their dim() must be identical,
  if just a vector, its length must be a divisor of  length(<matrix>)

10b) a factorialMPFR() which automatically uses full precision for
    integer-valued argument, notably using MPFR's mpfr_fac_ui; see also end
    of man/mpfr-class.Rd



14) Want to *change*  'precBits' of existing MPFR numbers;
    MPFR has  mpfr_set_prec(X, PREC)  but that sets the value to NaN.
    Manual:  "In case you want to keep the previous value stored in X, use
               `mpfr_prec_round' instead."

   --> fulfilled via  roundMpfr(x, precBits)



15) beta(.,.) and lbeta(.,.) .. using  my_mpfr_beta() in C.
   Interestingly, the speedup is not dramatical
    (50% for length 200; 300% for length 1)

4) format() got more (optional) arguments, along the format.default()
   example.
   Note that an option to "round() after decimal" should not be needed,
   rather  format(round(..), digits= ., drop0trailing=TRUE) does work.


12) crossprod(), tcrossprod() (and more?) methods for "mpfrMatrix".

10) chooseMpfr(a,n) is now implemented --- *NOT* based on gamma(),
    but rather n.

11b) No longer --- problem were missing  mpfr_clear() statements in src/utils.c :
    format(<mpfr>) --> .mpfr2str() -> C mpfr2str()  still suffers from a
    memory bug, inspite of my efforts in src/convert.c
    I think this is the MPFR library just allocating memory that's in use
    by R, but it seems hard to prove and or fix that.


17a) as(1, "mpfr") & TRUE : no longer gives infinite recursion error

17a) Write a 'Rmpfr-package' help page that mentions that we have *many*
     Math etc functions, including  gamma, digamma, ....  {which are not
     quickly visible on the help pages now}.


20) integrateR( ... rel.tol, verbose= TRUE) :
    the precision of the output should be increased a bit,
    (still depending  on rel.tol !)

22) apply(<mpfrArray>, .) --> S4 method

23) quantile(<mpfr>)  does not work ---- but will from R 2.15.1 with better quantile.default()
    Reason: in stats::quantile.default(),
      ifelse(h == 0, qs[i], (1 - h) * qs[i] + h * x[hi[i]])
    produces a list of 'mpfr1' instead a real 'mpfr' vector.
    -> Fixed in ~/R/D/r-devel/R/src/library/stats/R/quantile.R

23x) sumBinomMpfr()  accept  f.x

